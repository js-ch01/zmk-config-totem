#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define BASE 0
#define NAV  1
#define NUM  2
#define SYS  3
#define MSE  4
#define ETC  5
#define U_MOUSE_MOVE_MAX 2000
#define U_MOUSE_SCROLL_MAX 100

&mt {
    tapping-term-ms = <220>;
    flavor = "tap-preferred";

    // require-prior-idle-ms = <60>;

    quick-tap-ms = <200>;
};

&lt { quick-tap-ms = <200>; };

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE>; };

&sk { release-after-ms = <1700>; };

//      ┏━━━━┳━━━━┳━━━━┳━━━━┳━━━━┓  ┏━━━━┳━━━━┳━━━━┳━━━━┳━━━━┓
//      ┃ 0  ┃ 1  ┃ 2  ┃ 3  ┃ 4  ┃  ┃ 5  ┃ 6  ┃ 7  ┃ 8  ┃ 9  ┃
//      ┣━━━━╋━━━━╋━━━━╋━━━━╋━━━━┫  ┣━━━━╋━━━━╋━━━━╋━━━━╋━━━━┫
//      ┃ 10 ┃ 11 ┃ 12 ┃ 13 ┃ 14 ┃  ┃ 15 ┃ 16 ┃ 17 ┃ 18 ┃ 19 ┃
// ┏━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━┫  ┣━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━┓
// ┃ 20 ┃ 21 ┃ 22 ┃ 23 ┃ 24 ┃ 25 ┃  ┃ 26 ┃ 27 ┃ 28 ┃ 29 ┃ 30 ┃ 31 ┃
// ┗━━━━┻━━━━┻━━━━╋━━━━╋━━━━╋━━━━┫  ┣━━━━╋━━━━╋━━━━╋━━━━┻━━━━┻━━━━┛
//                ┃ 32 ┃ 33 ┃ 34 ┃  ┃ 35 ┃ 36 ┃ 37 ┃
//                ┗━━━━┻━━━━┻━━━━┛  ┗━━━━┻━━━━┻━━━━┛

/ {
    behaviors {
        pipe_hold_double: pipe_hold_double {
            compatible = "zmk,behavior-hold-tap";
            label = "PIPE_HOLD_DOUBLE";
            bindings = <&double_pipe>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <230>;
        };

        amps_hold_double: amps_hold_double {
            compatible = "zmk,behavior-hold-tap";
            label = "AMPS_HOLD_DOUBLE";
            bindings = <&double_amp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        euqal_hold_double: euqal_hold_double {
            compatible = "zmk,behavior-hold-tap";
            label = "EUQAL_HOLD_DOUBLE";
            bindings = <&double_equal>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        excl_hold_not_euqal: excl_hold_not_euqal {
            compatible = "zmk,behavior-hold-tap";
            label = "EXCL_HOLD_NOT_EUQAL";
            bindings = <&not_equal>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        plus_hold_double: plus_hold_double {
            compatible = "zmk,behavior-hold-tap";
            label = "PLUS_HOLD_DOUBLE";
            bindings = <&double_plus>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        minus_hold_double: minus_hold_double {
            compatible = "zmk,behavior-hold-tap";
            label = "MINUS_HOLD_DOUBLE";
            bindings = <&double_mimus>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        gt_hold_gte: gt_hold_gte {
            compatible = "zmk,behavior-hold-tap";
            label = "GT_HOLD_GTE";
            bindings = <&gte>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        lt_hold_lte: lt_hold_lte {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HOLD_LTE";
            bindings = <&lte>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        mt_shift_left: mt_shift_left {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_SHIFT_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <145>;
            flavor = "tap-preferred";
        };

        under_hold_double: under_hold_double {
            compatible = "zmk,behavior-hold-tap";
            label = "UNDER_HOLD_DOUBLE";
            bindings = <&double_underscore>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        mt_shift_right: mt_shift_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_SHIFT_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <145>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34 35 37 36 16 17 18 19 31>;
        };

        ht_mouse_scroll: ht_mouse_scroll {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MOUSE_SCROLL";
            bindings = <&mwh>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        ht_mouse_move: ht_mouse_move {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MOUSE_MOVE";
            bindings = <&mmv>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        ht_lpar_hold_lr: ht_lpar_hold_lr {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LPAR_HOLD_LR";
            bindings = <&parenthesis_lr>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ht_lbrace_hold_lr: ht_lbrace_hold_lr {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LBRACE_HOLD_LR";
            bindings = <&braces_lr>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ht_lbracket_hold_lr: ht_lbracket_hold_lr {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LBRACKET_HOLD_LR";
            bindings = <&brackets_lr>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        mt_h: mt_h {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_H";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <600>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <39>;
            key-positions = <1 0>;
            bindings = <&kp ESC>;
            layers = <0 2 3 9 4>;
        };

        combo_lpar {
            timeout-ms = <38>;
            key-positions = <12 13>;
            bindings = <&ht_lpar_hold_lr 0 LEFT_PARENTHESIS>;
            layers = <0 3>;
        };

        combo_rpar {
            timeout-ms = <33>;
            key-positions = <16 17>;
            bindings = <&kp RPAR>;
            layers = <0>;
        };

        combo_lbkt {
            timeout-ms = <38>;
            key-positions = <11 13>;
            bindings = <&ht_lbracket_hold_lr 0 LEFT_BRACKET>;
            layers = <0 3>;
        };

        combo_rbkt {
            timeout-ms = <33>;
            key-positions = <16 18>;
            bindings = <&kp RBKT>;
            layers = <0>;
        };

        combo_lbrc {
            timeout-ms = <38>;
            key-positions = <12 11>;
            bindings = <&ht_lbrace_hold_lr 0 LEFT_BRACE>;
            layers = <0 3>;
        };

        combo_rbrc {
            timeout-ms = <33>;
            key-positions = <17 18>;
            bindings = <&kp RIGHT_BRACE>;
            layers = <0>;
        };

        combo_lt {
            timeout-ms = <45>;
            key-positions = <22 24>;
            bindings = <&lt_hold_lte 0 LT>;
            layers = <0 3>;
        };

        combo_gt {
            timeout-ms = <45>;
            key-positions = <27 29>;
            bindings = <&gt_hold_gte 0 GT>;
            layers = <0 3>;
        };

        combo_game_layer {
            bindings = <&tog 9>;
            key-positions = <20 31>;
            layers = <0 9>;
        };

        combo_bspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 6>;
            layers = <0 2 3 9>;
        };

        combo_del {
            bindings = <&kp DEL>;
            key-positions = <17 7>;
            layers = <0 2 3 9>;
        };

        combo_ctrl_z {
            bindings = <&kp LC(Z)>;
            key-positions = <21 10>;
            layers = <0>;
        };

        combo_ctrl_x {
            bindings = <&kp LC(X)>;
            key-positions = <22 11>;
            layers = <0>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <23 12>;
            layers = <0>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <13 24>;
            layers = <0>;
        };

        combo_repeat {
            bindings = <&key_repeat>;
            key-positions = <8 18>;
            layers = <0 2 3 9>;
        };

        combo_clean {
            bindings = <&tog 11>;
            key-positions = <32 33 34>;
            layers = <0 11>;
        };

        combo_space {
            bindings = <&kp SPACE>;
            key-positions = <2 12>;
            layers = <0 2 3 4 5>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <3 13>;
            layers = <0 2 3 4 9 5>;
        };

        combo_ctrl_alt_c {
            bindings = <&kp LC(LA(C))>;
            key-positions = <14 25>;
            layers = <0>;
        };

        combo_caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <1 11>;
            layers = <0>;
        };

        combo_num0 {
            bindings = <&kp N0>;
            key-positions = <16 27>;
            layers = <0 3>;
        };

        combo_mouse_layer {
            bindings = <&tog 1>;
            key-positions = <1 3>;
            layers = <0 1>;
        };

        combo_num1 {
            bindings = <&kp N1>;
            key-positions = <17 28>;
            layers = <0 3>;
        };

        combo_ctrl+a {
            bindings = <&kp LC(A)>;
            key-positions = <10 0>;
            layers = <0>;
        };

        combo_num9 {
            bindings = <&kp N9>;
            key-positions = <18 29>;
            layers = <0 3>;
        };

        combo_equal {
            bindings = <&euqal_hold_double 0 EQUAL>;
            key-positions = <22 23>;
            timeout-ms = <45>;
            layers = <0 3>;
        };

        combo_plus {
            bindings = <&plus_hold_double 0 PLUS>;
            key-positions = <23 24>;
            timeout-ms = <45>;
            layers = <0 3>;
        };

        combo_wintab {
            bindings = <&kp LG(TAB)>;
            key-positions = <25 33>;
            timeout-ms = <45>;
            layers = <0 3>;
        };

        combo_win+grave {
            bindings = <&kp LG(GRAVE)>;
            key-positions = <2 3>;
            layers = <0>;
        };

        combo_win+tlide {
            bindings = <&kp LG(LS(GRAVE))>;
            key-positions = <2 1>;
            layers = <0>;
        };

        combo_minus2 {
            bindings = <&minus_hold_double 0 MINUS>;
            key-positions = <27 28>;
            timeout-ms = <45>;
            layers = <0>;
        };

        combo_underscore {
            bindings = <&under_hold_double 0 UNDERSCORE>;
            key-positions = <28 29>;
            timeout-ms = <45>;
            layers = <0>;
        };

        combo_altF4 {
            bindings = <&kp LA(F4)>;
            key-positions = <0 3>;
            layers = <0>;
        };

        combo_dq {
            bindings = <&kp DQT>;
            key-positions = <2 11>;
            layers = <0 3>;
            timeout-ms = <45>;
        };

        combo_sq {
            bindings = <&kp SQT>;
            key-positions = <18 7>;
            layers = <0 3>;
            timeout-ms = <45>;
        };
    };

    macros {
        double_pipe: double_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp PIPE &kp PIPE>;

            label = "DOUBLE_PIPE";
        };

        double_amp: double_amp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp AMPS &kp AMPS>;

            label = "DOUBLE_AMP";
        };

        double_equal: double_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp EQUAL &kp EQUAL>;

            label = "DOUBLE_EQUAL";
        };

        not_equal: not_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp EXCL &kp EQUAL>;

            label = "NOT_EQUAL";
        };

        double_plus: double_plus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp PLUS &kp PLUS>;

            label = "DOUBLE_PLUS";
        };

        double_mimus: double_mimus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp MINUS &kp MINUS>;

            label = "DOUBLE_MIMUS";
        };

        gte: gte {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp GT &kp EQUAL>;

            label = "GTE";
        };

        lte: lte {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp LT &kp EQUAL>;

            label = "LTE";
        };

        double_underscore: double_underscore {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp UNDERSCORE &kp UNDERSCORE>;

            label = "DOUBLE_UNDERSCORE";
        };

        parenthesis_lr: parenthesis_lr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp LPAR &kp RPAR>;

            label = "PARENTHESIS_LR";
        };

        braces_lr: braces_lr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp LBRC &kp RBRC>;

            label = "BRACES_LR";
        };

        brackets_lr: brackets_lr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp LBKT &kp RBKT>;

            label = "BRACKETS_LR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
             &lt 6 Q     &kp W       &kp E        &kp R                        &kp T           &kp Y            &kp U                         &kp I               &kp O           &kp P
             &mt LGUI A  &mt LALT S  &mt LCTRL D  &mt_shift_left LEFT_SHIFT F  &kp G           &kp H            &mt_shift_right LEFT_SHIFT J  &mt LEFT_CONTROL K  &mt LEFT_ALT L  &mt LEFT_GUI SEMI
&lt 8 LCTRL  &lt 4 Z     &kp X       &kp C        &kp V                        &lt 5 B         &kp N            &kp M                         &kp COMMA           &kp DOT         &mt BACKSLASH SLASH  &kp LEFT_SHIFT
                                     &lt 1 TAB    &lt 3 BACKSPACE              &lt 7 DELETE    &lt 7 RIGHT_ALT  &lt 3 SPACE                   &lt 2 ENTER
            >;
        };

        mouse_layer {
            label = "MSE";
            bindings = <
       &mwh SCROLL_UP    &mwh SCROLL_LEFT  &mmv MOVE_UP    &mwh SCROLL_RIGHT  &mkp MB4    &none      &mwh SCROLL_LEFT  &mmv MOVE_UP    &mwh SCROLL_RIGHT  &mwh SCROLL_UP
       &mwh SCROLL_DOWN  &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT    &mkp MB5    &none      &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT    &mwh SCROLL_DOWN
&none  &kp LG(LS(D))     &mkp LCLK         &mkp MCLK       &mkp RCLK          &none       &none      &mkp LCLK         &mkp MCLK       &mkp RCLK          &none             &none
                                           &none           &none              &none       &mkp LCLK  &mkp MCLK         &mkp RCLK
            >;
        };

        navi_layer {
            label = "NAV";
            bindings = <
        &trans         &trans         &trans             &trans           &trans    &kp INSERT  &kp HOME                &kp UP         &kp END                  &kp PG_UP
        &kp LEFT_GUI   &kp LEFT_ALT   &kp LCTRL          &kp LSHIFT       &trans    &trans      &kp LEFT                &kp DOWN       &kp RIGHT                &kp PG_DN
&trans  &kp RIGHT_GUI  &kp RIGHT_ALT  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT  &trans    &trans      &kp LC(LG(LEFT_ARROW))  &kp LC(LG(D))  &kp LC(LG(RIGHT_ARROW))  &trans     &none
                                      &trans             &trans           &trans    &trans      &trans                  &trans
            >;
        };

        num_sym_layer {
            label = "NUM_SYM";
            bindings = <
        &kp GRAVE                    &kp TILDE     &kp CARET         &amps_hold_double 0 AMPS  &pipe_hold_double 0 PIPE    &kp STAR   &kp N7  &kp N8  &kp N9  &kp PLUS
        &excl_hold_not_euqal 0 EXCL  &kp AT        &kp HASH          &kp DOLLAR                &kp PERCENT                 &kp SLASH  &kp N4  &kp N5  &kp N6  &kp MINUS
&trans  &kp INSERT                   &kp QUESTION  &kp LEFT_BRACKET  &kp RIGHT_BRACKET         &kp UNDERSCORE              &kp DOT    &kp N1  &kp N2  &kp N3  &kp BSLH   &kp LG(Z)
                                                   &trans            &trans                    &trans                      &trans     &trans  &kp N0
            >;
        };

        num_left {
            bindings = <
        &kp ASTERISK  &kp N7  &kp N8  &kp N9  &kp PLUS     &trans  &trans  &trans  &trans  &trans
        &kp SLASH     &kp N4  &kp N5  &kp N6  &kp MINUS    &trans  &trans  &trans  &trans  &trans
&trans  &none         &kp N1  &kp N2  &kp N3  &kp DOT      &trans  &trans  &trans  &trans  &trans  &trans
                              &kp N0  &trans  &trans       &trans  &trans  &trans
            >;

            label = "NUM_LEFT_LAYER";
        };

        arrow_left {
            bindings = <
        &kp TAB  &kp HOME                &kp UP_ARROW    &kp END            &kp LC(INSERT)    &trans  &trans  &trans  &trans  &trans
        &trans   &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW    &kp LS(INSERT)    &trans  &trans  &trans  &trans  &trans
&trans  &trans   &kp LC(LG(LEFT_ARROW))  &kp LG(DOWN)    &kp LC(LG(RIGHT))  &none             &trans  &trans  &trans  &trans  &trans  &trans
                                         &trans          &trans             &trans            &trans  &trans  &trans
            >;
        };

        WM_LEFT {
            bindings = <
        &trans  &kp LG(LS(UP_ARROW))  &kp LG(UP_ARROW)    &kp LG(LS(DOWN))  &kp LC(UP_ARROW)    &trans  &trans  &trans  &trans  &trans
        &trans  &kp LG(LEFT_ARROW)    &kp LG(DOWN_ARROW)  &kp LG(RIGHT)     &kp LC(DOWN)        &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LG(SLASH)         &kp LG(M)           &kp LG(O)         &kp LG(Y)           &trans  &trans  &trans  &trans  &trans  &trans
                                      &trans              &trans            &trans              &trans  &trans  &trans
            >;
        };

        func_layer {
            label = "FUN";
            bindings = <
                 &kp RCTRL        &bt BT_SEL 0   &bt BT_SEL 1          &bt BT_SEL 2          &bt BT_CLR           &kp PSCRN        &kp F7             &kp F8             &kp F9  &kp F12
                 &sk LEFT_GUI     &sk LEFT_ALT   &sk LCTRL             &sk LEFT_SHIFT        &kp LC(D)            &kp SLCK         &kp F4             &kp F5             &kp F6  &kp F11
&kp LS(LC(ESC))  &kp PRINTSCREEN  &kp LG(LC(T))  &kp LG(LS(T))         &kp LG(LS(LC(T)))     &kp LG(LC(LS(R)))    &kp PAUSE_BREAK  &kp F1             &kp F2             &kp F3  &kp F10  &kp LOCKING_NUM
                                                 &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &none                &kp RIGHT_ALT    &kp K_APPLICATION  &kp RIGHT_CONTROL
            >;
        };

        func_left_layer {
            bindings = <
        &kp C_VOLUME_UP    &kp F7  &kp F8    &kp F9          &kp F12            &trans  &trans  &trans  &trans  &trans
        &kp C_VOLUME_DOWN  &kp F4  &kp F5    &kp F6          &kp F11            &trans  &trans  &trans  &trans  &trans
&trans  &kp C_MUTE         &kp F1  &kp F2    &kp F3          &kp F10            &trans  &trans  &trans  &trans  &trans  &trans
                                   &kp C_PP  &kp LEFT_ARROW  &kp RIGHT_ARROW    &trans  &trans  &trans
            >;

            label = "FUNC_LEFT";
        };

        game_layer {
            bindings = <
              &kp T           &kp Q  &kp W       &kp E      &kp R             &kp Y          &kp U      &kp I      &kp O    &kp P
              &kp LCTRL       &kp A  &kp S       &kp D      &kp F             &kp H          &kp J      &kp K      &kp L    &kp SEMI
&kp LEFT_ALT  &kp LEFT_SHIFT  &kp Z  &kp X       &kp C      &kp V             &kp N          &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                                     &lt 10 TAB  &kp SPACE  &kp LEFT_SHIFT    &kp RIGHT_ALT  &kp SPACE  &kp ENTER
            >;

            label = "GAME";
        };

        game_num_layer {
            bindings = <
                 &trans     &trans  &trans  &trans  &kp T     &trans  &trans  &trans  &trans  &trans
                 &trans     &kp N4  &kp N5  &kp N6  &kp G     &trans  &trans  &trans  &trans  &trans
&kp LS(LC(ESC))  &kp GRAVE  &kp N1  &kp N2  &kp N3  &kp B     &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        clean_layer {
            bindings = <
       &none  &none  &none  &none  &none    &none  &none  &none  &none  &none
       &none  &none  &none  &none  &none    &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                     &none  &none  &none    &none  &none  &none
            >;

            label = "CLEAN";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
