#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define NUM  2
#define SYS  3
#define MSE  4
#define ETC  5

// mod-tap

&mt {
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
};

&lt {
    quick-tap-ms = <200>;
};

&caps_word {
};

//      ┏━━━━┳━━━━┳━━━━┳━━━━┳━━━━┓  ┏━━━━┳━━━━┳━━━━┳━━━━┳━━━━┓
//      ┃ 0  ┃ 1  ┃ 2  ┃ 3  ┃ 4  ┃  ┃ 5  ┃ 6  ┃ 7  ┃ 8  ┃ 9  ┃
//      ┣━━━━╋━━━━╋━━━━╋━━━━╋━━━━┫  ┣━━━━╋━━━━╋━━━━╋━━━━╋━━━━┫
//      ┃ 10 ┃ 11 ┃ 12 ┃ 13 ┃ 14 ┃  ┃ 15 ┃ 16 ┃ 17 ┃ 18 ┃ 19 ┃
// ┏━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━┫  ┣━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━┓
// ┃ 20 ┃ 21 ┃ 22 ┃ 23 ┃ 24 ┃ 25 ┃  ┃ 26 ┃ 27 ┃ 28 ┃ 29 ┃ 30 ┃ 31 ┃
// ┗━━━━┻━━━━┻━━━━╋━━━━╋━━━━╋━━━━┫  ┣━━━━╋━━━━╋━━━━╋━━━━┻━━━━┻━━━━┛
//                ┃ 32 ┃ 33 ┃ 34 ┃  ┃ 35 ┃ 36 ┃ 37 ┃
//                ┗━━━━┻━━━━┻━━━━┛  ┗━━━━┻━━━━┻━━━━┛

/ {
    behaviors {
        pipe_hold_double: pipe_hold_double {
            compatible = "zmk,behavior-hold-tap";
            label = "PIPE_HOLD_DOUBLE";
            bindings = <&double_pipe>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        amps_hold_double: amps_hold_double {
            compatible = "zmk,behavior-hold-tap";
            label = "AMPS_HOLD_DOUBLE";
            bindings = <&double_amp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        euqal_hold_double: euqal_hold_double {
            compatible = "zmk,behavior-hold-tap";
            label = "EUQAL_HOLD_DOUBLE";
            bindings = <&double_equal>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        excl_hold_not_euqal: excl_hold_not_euqal {
            compatible = "zmk,behavior-hold-tap";
            label = "EXCL_HOLD_NOT_EUQAL";
            bindings = <&not_equal>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        plus_hold_double: plus_hold_double {
            compatible = "zmk,behavior-hold-tap";
            label = "PLUS_HOLD_DOUBLE";
            bindings = <&double_plus>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        minus_hold_double: minus_hold_double {
            compatible = "zmk,behavior-hold-tap";
            label = "MINUS_HOLD_DOUBLE";
            bindings = <&double_mimus>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        gt_hold_gte: gt_hold_gte {
            compatible = "zmk,behavior-hold-tap";
            label = "GT_HOLD_GTE";
            bindings = <&gte>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lt_hold_lte: lt_hold_lte {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HOLD_LTE";
            bindings = <&lte>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lt_tog_colemak: lt_tog_colemak {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_TOG_COLEMAK";
            bindings = <&mo>, <&tog_colemak>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        auto_shift: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        mt_shift: mt_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 0>;
            bindings = <&kp ESC>;
            layers = <0 2 3 8 1>;
        };

        combo_lpar {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LPAR>;
            layers = <0 1>;
        };

        combo_rpar {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp RPAR>;
            layers = <0 1>;
        };

        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <11 13>;
            bindings = <&kp LBKT>;
            layers = <0 1>;
        };

        combo_rbkt {
            timeout-ms = <50>;
            key-positions = <16 18>;
            bindings = <&kp RBKT>;
            layers = <0 1>;
        };

        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <12 11>;
            bindings = <&kp LBRC>;
            layers = <0 1>;
        };

        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RIGHT_BRACE>;
            layers = <0 1>;
        };

        combo_lt {
            timeout-ms = <50>;
            key-positions = <2 11>;
            bindings = <&lt_hold_lte 0 LT>;
            layers = <0 1>;
        };

        combo_gt {
            timeout-ms = <50>;
            key-positions = <7 18>;
            bindings = <&gt_hold_gte 0 GT>;
            layers = <0 1>;
        };

        combo_plus {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&plus_hold_double 0 PLUS>;
            layers = <0 1>;
        };

        combo_equal {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&euqal_hold_double 0 EQUAL>;
            layers = <0 1>;
        };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&minus_hold_double 0 MINUS>;
            layers = <0 1>;
        };

        combo_under {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp UNDER>;
            layers = <0 1>;
        };

        combo_dqt {
            timeout-ms = <50>;
            key-positions = <7 17>;
            bindings = <&kp DQT>;
            layers = <0 1>;
        };

        combo_colon {
            bindings = <&kp LS(P)>;
            key-positions = <2 12>;
            timeout-ms = <50>;
            layers = <0 1>;
        };

        combo.capswords {
            bindings = <&caps_word>;
            key-positions = <3 13>;
            timeout-ms = <50>;
            layers = <0 1>;
        };

        combo_MSE1 {
            bindings = <&tog 7>;
            key-positions = <34 35>;
            layers = <0 7 1>;
        };

        combo_game_layer {
            bindings = <&tog 8>;
            key-positions = <20 31>;
            layers = <0 8 1>;
        };

        combo_bspc2 {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 27>;
            layers = <0 2 3 8 1>;
        };

        combo_del2 {
            bindings = <&kp DEL>;
            key-positions = <17 28>;
            layers = <0 2 3 8 1>;
        };

        combo_ctrl_z {
            bindings = <&kp LC(Z)>;
            key-positions = <21 10>;
            layers = <0 1>;
        };

        combo_ctrl_x {
            bindings = <&kp LC(X)>;
            key-positions = <22 11>;
            layers = <0 1>;
        };

        combo_ctrl_c {
            bindings = <&kp LC(C)>;
            key-positions = <23 12>;
            layers = <0 1>;
        };

        combo_ctrl_v {
            bindings = <&kp LC(B)>;
            key-positions = <13 24>;
            layers = <0 1>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <25 14>;
            layers = <0 2 3 7 8 1>;
        };

        combo_semi {
            bindings = <&kp P>;
            key-positions = <6 16>;
            layers = <0 2 3 8 1>;
        };

        combo_clean {
            bindings = <&tog 10>;
            key-positions = <32 33 34>;
            layers = <0 1 10>;
        };

        combo_space {
            bindings = <&kp SPACE>;
            key-positions = <33 34>;
            layers = <0 1 2 3>;
        };

        combo_sq {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <8 18>;
            timeout-ms = <50>;
            layers = <0 1>;
        };
    };

    macros {
        double_pipe: double_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp PIPE &kp PIPE>;

            label = "DOUBLE_PIPE";
        };

        double_amp: double_amp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp AMPS &kp AMPS>;

            label = "DOUBLE_AMP";
        };

        double_equal: double_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp EQUAL &kp EQUAL>;

            label = "DOUBLE_EQUAL";
        };

        not_equal: not_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp EXCL &kp EQUAL>;

            label = "NOT_EQUAL";
        };

        double_plus: double_plus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp PLUS &kp PLUS>;

            label = "DOUBLE_PLUS";
        };

        double_mimus: double_mimus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp MINUS &kp MINUS>;

            label = "DOUBLE_MIMUS";
        };

        gte: gte {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp GT &kp EQUAL>;

            label = "GTE";
        };

        lte: lte {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp LT &kp EQUAL>;

            label = "LTE";
        };

        tog_colemak: tog_colemak {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&tog 1 &kp RALT>;

            label = "TOG_COLEMAK";
            wait-ms = <30>;
            tap-ms = <30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_qwerty_layer {
            label = "BASE";
            bindings = <
                     &auto_shift LS(Q) Q  &auto_shift LS(W) W  &auto_shift LS(E) E  &auto_shift LS(R) R     &auto_shift LS(T) T    &kp Y            &kp U                   &kp I        &auto_shift LS(O) O  &auto_shift LS(P) P
                     &mt LGUI A           &mt LALT S           &mt LCTRL D          &mt_shift LEFT_SHIFT F  &kp G                  &kp H            &mt_shift LEFT_SHIFT J  &mt LCTRL K  &mt LALT L           &mt LEFT_GUI SEMI
&lt_tog_colemak 6 0  &lt 4 Z              &kp X                &kp C                &kp V                   &kp B                  &kp N            &kp M                   &kp COMMA    &kp DOT              &mt BACKSLASH SLASH  &kp RALT
                                                               &lt 2 TAB            &lt 3 BACKSPACE         &lt 5 DEL              &lt 5 LS(SPACE)  &lt 3 SPACE             &lt 2 ENTER
            >;
        };

        colemak_dh_layer {
            bindings = <
                     &kp Q       &kp W       &kp F        &kp P                   &kp B        &kp J                &kp L                   &kp U        &kp Y       &kp SEMI
                     &mt LGUI A  &mt LALT R  &mt LCTRL S  &mt_shift LEFT_SHIFT T  &kp G        &kp M                &mt_shift LEFT_SHIFT N  &mt LCTRL E  &mt LALT I  &mt LEFT_GUI O
&lt_tog_colemak 6 0  &lt 4 Z     &kp X       &kp C        &kp D                   &kp V        &kp K                &kp H                   &kp COMMA    &kp DOT     &mt BACKSLASH SLASH  &kp RALT
                                             &lt 2 TAB    &lt 3 BACKSPACE         &lt 5 DEL    &lt_tog_colemak 5 0  &lt 3 SPACE             &lt 2 ENTER
            >;

            label = "COLEMAK";
        };

        navi_layer {
            label = "NAV";
            bindings = <
       &mwh SCROLL_UP    &mwh SCROLL_LEFT  &mmv MOVE_UP    &mwh SCROLL_RIGHT  &mkp LCLK    &kp INS  &kp HOME   &kp UP     &kp END    &kp PG_UP
       &mwh SCROLL_DOWN  &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT    &mkp MCLK    &trans   &kp LEFT   &kp DOWN   &kp RIGHT  &kp PG_DN
&to 7  &trans            &mkp LCLK         &kp LCTRL       &kp LEFT_SHIFT     &mkp RCLK    &trans   &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans     &trans
                                           &trans          &trans             &trans       &trans   &trans     &trans
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
               &mt TILDE GRAVE              &kp QUESTION     &kp CARET     &amps_hold_double 0 AMPS  &pipe_hold_double 0 PIPE    &kp STAR   &kp N7  &kp N8  &kp N9  &kp PLUS
               &excl_hold_not_euqal 0 EXCL  &kp AT           &kp HASH      &kp DOLLAR                &kp PERCENT                 &kp SLASH  &kp N4  &kp N5  &kp N6  &kp MINUS
&kp LG(LS(S))  &kp C_PLAY_PAUSE             &kp C_VOLUME_UP  &kp C_VOL_DN  &kp C_MUTE                &kp SQT                     &kp DOT    &kp N1  &kp N2  &kp N3  &kp BSLH   &kp LG(Z)
                                                             &trans        &trans                    &trans                      &trans     &trans  &kp N0
            >;
        };

        num_left {
            bindings = <
        &kp LS(STAR)  &kp N7  &kp N8  &kp N9  &kp LS(PLUS)    &trans  &trans  &trans  &trans  &trans
        &kp N0        &kp N4  &kp N5  &kp N6  &kp MINUS       &trans  &trans  &trans  &trans  &trans
&trans  &trans        &kp N1  &kp N2  &kp N3  &kp BSLH        &trans  &trans  &trans  &trans  &trans  &trans
                              &trans  &trans  &trans          &trans  &trans  &trans
            >;

            label = "NUM_LEFT_LAYER";
        };

        func_layer {
            label = "FUN";
            bindings = <
                 &kp CAPS           &bt BT_SEL 0          &bt BT_SEL 1          &bt BT_SEL 2    &bt BT_CLR       &kp PSCRN        &kp F7  &kp F8  &kp F9  &kp F12
                 &sk LEFT_GUI       &sk LEFT_ALT          &sk LCTRL             &sk LEFT_SHIFT  &tog_colemak     &kp SLCK         &kp F4  &kp F5  &kp F6  &kp F11
&kp LS(LC(ESC))  &kp K_APPLICATION  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &kp RCTRL       &kp RIGHT_ALT    &kp PAUSE_BREAK  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                                                          &none                 &none           &none            &none            &none   &none
            >;
        };

        func_left_layer {
            bindings = <
        &trans  &kp F7  &kp F8  &kp F9  &kp F12    &trans  &trans  &trans  &trans  &trans
        &trans  &kp F4  &kp F5  &kp F6  &kp F11    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F10    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans     &trans  &trans  &trans
            >;

            label = "FUNC_LEFT";
        };

        mouse_layer {
            label = "MSE";
            bindings = <
       &mwh SCROLL_UP    &mwh SCROLL_LEFT  &mmv MOVE_UP    &mwh SCROLL_RIGHT  &none        &none      &mwh SCROLL_LEFT  &mmv MOVE_UP    &mwh SCROLL_RIGHT  &mwh SCROLL_UP
       &mwh SCROLL_DOWN  &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT    &trans       &trans     &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT    &mwh SCROLL_DOWN
&to 0  &none             &none             &kp LCTRL       &kp LEFT_SHIFT     &trans       &trans     &kp LEFT_SHIFT    &kp LCTRL       &none              &none             &to 0
                                           &mkp LCLK       &mkp MCLK          &mkp RCLK    &mkp LCLK  &mkp MCLK         &mkp RCLK
            >;
        };

        game_layer {
            bindings = <
              &kp Q  &kp W  &kp E      &kp R      &kp T             &kp Y          &kp U      &kp I      &kp O    &kp P
              &kp A  &kp S  &kp D      &kp F      &kp G             &kp H          &kp J      &kp K      &kp L    &kp SEMI
&kp LEFT_ALT  &kp Z  &kp X  &kp C      &kp V      &kp B             &kp N          &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                            &lt 9 TAB  &kp SPACE  &kp LEFT_SHIFT    &kp RIGHT_ALT  &kp SPACE  &kp ENTER
            >;

            label = "GAME";
        };

        game_num_layer {
            bindings = <
                 &trans     &trans  &trans  &trans  &kp Y     &trans  &trans  &trans  &trans  &trans
                 &trans     &kp N4  &kp N5  &kp N6  &kp H     &trans  &trans  &trans  &trans  &trans
&kp LS(LC(ESC))  &kp GRAVE  &kp N1  &kp N2  &kp N3  &kp N     &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        clean_layer {
            bindings = <
       &none  &none  &none  &none  &none    &none  &none  &none  &none  &none
       &none  &none  &none  &none  &none    &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                     &none  &none  &none    &none  &none  &none
            >;

            label = "CLEAN";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
    };
};
