#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

&sk { release-after-ms = <1700>; };

&lt { quick-tap-ms = <200>; };

/ {
    behaviors {
        ht_hm_rshft: hm_Rshift {
            compatible = "zmk,behavior-hold-tap";
            label = "ht_hm_rshft";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <155>;
        };

        ht_hm_lshft: hm_Lshift {
            compatible = "zmk,behavior-hold-tap";
            label = "ht_hm_lshft";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <155>;
        };

        ht_hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "Homerow Mod";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        gt_gte: gt_hold_gte {
            compatible = "zmk,behavior-hold-tap";
            label = "GT_GTE";
            bindings = <&gte>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        lt_lte: lt_hold_lte {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_LTE";
            bindings = <&lte>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        lpar_lr: lpar_hold_lr {
            compatible = "zmk,behavior-hold-tap";
            label = "LPAR_LR";
            bindings = <&double_parenthesis_lr>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        lbrace_lr: lbrace_hold_lr {
            compatible = "zmk,behavior-hold-tap";
            label = "LBRACE_LR";
            bindings = <&double_braces_lr>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        lbracket_lr: lbracket_hold_lr {
            compatible = "zmk,behavior-hold-tap";
            label = "LBRACKET_LR";
            bindings = <&double_brackets_lr>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        lt_mkp: lt_moL_mouseKP {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_MOUSEKP";
            bindings = <&mo>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ht_mkp: ht_mouseKP_KP {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MOUSEKP";
            bindings = <&mkp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_lpar {
            key-positions = <16 15>;
            bindings = <&lpar_lr 0 LEFT_PARENTHESIS>;
            layers = <0 1>;
        };

        combo_rpar {
            key-positions = <19 20>;
            bindings = <&kp RPAR>;
            layers = <0>;
        };

        combo_lbkt {
            key-positions = <14 16>;
            bindings = <&lbracket_lr 0 LEFT_BRACKET>;
            layers = <0 1>;
        };

        combo_rbkt {
            key-positions = <19 21>;
            bindings = <&kp RBKT>;
            layers = <0>;
        };

        combo_lbrc {
            key-positions = <14 15>;
            bindings = <&lbrace_lr 0 LEFT_BRACE>;
            layers = <0>;
        };

        combo_rbrc {
            key-positions = <20 21>;
            bindings = <&kp RIGHT_BRACE>;
            layers = <0>;
        };

        combo_game_layer {
            bindings = <&tog 4>;
            key-positions = <24 35>;
            layers = <0 4>;
        };

        combo_bspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 19>;
            layers = <0 1 2>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <27 15>;
            layers = <0>;
        };

        combo_clean {
            bindings = <&tog 11>;
            key-positions = <36 37 38>;
            layers = <0 11>;
        };

        combo_space {
            bindings = <&kp SPACE>;
            key-positions = <4 16>;
            layers = <0 1 2 5>;
        };

        combo_num0 {
            bindings = <&kp N0>;
            key-positions = <31 19>;
            layers = <0 1 5>;
        };

        combo_num1 {
            bindings = <&kp NUMBER_1>;
            key-positions = <32 20>;
            layers = <0 1 5>;
        };

        combo_num9 {
            bindings = <&kp N9>;
            key-positions = <33 21>;
            layers = <0 1 5>;
        };

        combo_meta+a {
            bindings = <&kp LG(A)>;
            key-positions = <38 37>;
            layers = <0 1>;
        };

        combo_altF4 {
            bindings = <&kp LA(F4)>;
            key-positions = <1 4>;
            layers = <0>;
        };

        combo_toggle_Trackball {
            bindings = <&tog 8>;
            key-positions = <31 34>;
            layers = <0 8 9>;
        };

        combo_enterL {
            bindings = <&kp ENTER>;
            key-positions = <25 26>;
            layers = <0 1 2 4>;
        };

        combo_enterR {
            bindings = <&kp ENTER>;
            key-positions = <34 33>;
            layers = <0 1 2 4>;
        };

        combo_delL {
            bindings = <&kp DELETE>;
            key-positions = <28 26>;
            layers = <0 1 2 4>;
        };

        combo_delR {
            bindings = <&kp DELETE>;
            key-positions = <31 33>;
            layers = <0 1 2 4>;
        };

        combo_escL {
            bindings = <&kp ESCAPE>;
            key-positions = <28 27>;
            layers = <0 1 2 4>;
        };

        combo_escR {
            bindings = <&kp ESCAPE>;
            key-positions = <31 32>;
            layers = <0 1 2 4>;
        };

        combo_mb4 {
            bindings = <&mkp MB4>;
            key-positions = <27 26>;
            layers = <0 1 2 4>;
        };

        combo_mb5 {
            bindings = <&mkp MB5>;
            key-positions = <32 33>;
            layers = <0 1 2 4>;
        };
    };

    macros {
        gte: gte {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp GT &kp EQUAL>;

            label = "GTE";
        };

        lte: lte {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp LT &kp EQUAL>;

            label = "LTE";
        };

        double_parenthesis_lr: double_parenthesis_lr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp LPAR &kp RPAR>;

            label = "DOUBLE_PARENTHESIS_LR";
        };

        double_braces_lr: double_braces_lr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp LBRC &kp RBRC>;

            label = "DOUBLE_BRACES_LR";
        };

        double_brackets_lr: double_brackets_lr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp LBKT &kp RBKT>;

            label = "DOUBLE_BRACKETS_LR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
                &kp Q       &kp W       &kp E        &kp R            &kp T           &kp Y            &kp U        &kp I        &kp O       &kp P
                &mt LGUI A  &mt LALT S  &mt LCTRL D  &mt LSHFT F      &kp G           &kp H            &mt RSHFT J  &mt RCTRL K  &mt RALT L  &mt RGUI SEMICOLON
&kp LEFT_SHIFT  &kp Z       &kp X       &kp C        &kp V            &kp B           &kp N            &kp M        &kp COMMA    &kp DOT     &kp FSLH            &kp RIGHT_SHIFT
                                        &lt 1 TAB    &lt 2 BACKSPACE  &lt 3 DELETE    &lt 3 RIGHT_ALT  &lt 2 SPACE  &lt 1 ENTER
            >;
        };

        nav_layer {
            label = "NAVI";
            bindings = <
        &kp ESC    &bt BT_CLR  &kp UP    &kp EQUAL  &kp LBRC    &kp RBRC  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_PLUS
        &kp LSHFT  &kp LEFT    &kp DOWN  &kp RIGHT  &kp LBKT    &kp RBKT  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_MINUS
&trans  &kp DEL    &kp PG_UP   &kp CAPS  &kp PG_DN  &kp LPAR    &kp RPAR  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_MULTIPLY  &trans
                               &trans    &trans     &trans      &trans     &kp KP_N0  &trans
            >;
        };

        sim_layer {
            label = "SYM";
            bindings = <
        &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET     &kp AMPS        &kp RA(U)   &kp SQT     &kp DQT
        &trans    &trans  &trans    &trans    &trans       &kp C_MUTE    &kp LS(RA(N4))  &kp RA(N5)  &kp RA(N4)  &kp RA(O)
&trans  &trans    &trans  &trans    &trans    &trans       &kp C_VOL_DN  &kp C_VOL_UP    &kp C_PREV  &kp C_NEXT  &kp BSLH   &trans
                          &trans    &trans    &trans       &trans        &kp C_PP        &trans
            >;
        };

        adjust_layer {
            label = "ADJ";
            bindings = <
        &trans  &bt BT_CLR    &out OUT_TOG    &trans        &bootloader    &trans  &kp F7  &kp F8  &kp F9  &kp F12
        &trans  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &trans         &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans  &trans        &studio_unlock  &trans        &trans         &trans  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                              &trans          &trans        &trans         &trans  &trans  &trans
            >;
        };
    };
};
